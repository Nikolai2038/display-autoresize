#!/bin/bash

# Fail command if any of pipeline blocks fail
set -o pipefail || exit "$?"

log_file_path="/var/log/display-autoresize.log"

# Only run as root user
if [ "${EUID}" -ne 0 ]; then
  echo "Please run as root." >&2
  exit 1
fi

# Resizes X11 display
function resize_x11() {
  local xauthority_file="${1}" && { shift || true; } || return "$?"
  local display="${1}" && { shift || true; } || return "$?"
  local output="${1}" && { shift || true; } || return "$?"

  # Change display resolution
  DISPLAY="${display}" XAUTHORITY="${xauthority_file}" xrandr --output "${output}" --auto || return "$?"

  return 0
}

# Resizes Wayland display for Sway
function resize_wayland_sway() {
  local sway_socket="${1}" && { shift || true; } || return "$?"
  local output="${1}" && { shift || true; } || return "$?"
  local output_number="${1}" && { shift || true; } || return "$?"

  local target_resolution
  target_resolution="$(drm_info | grep preferred | sed -En 's/^[^0-9]+([0-9]+)[^0-9]+([0-9]+@[^ ]+).+$/\1x\2/p' | head -n "${output_number}" | tail -n 1)Hz" || return "$?"
  echo "- Target resolution: ${target_resolution}" >&2

  # Change display resolution
  swaymsg --quiet --socket "${sway_socket}" "output ${output} mode --custom ${target_resolution}" || return "$?"

  return 0
}

# Function to find User Sessions & Resize their display
function display_autoresize() {
  declare -a x11_xauthority_infos sway_socket_infos outputs
  local user xauthority_file display output x11_xauthority_info x11_xauthority_infos_as_string sway_socket_infos_as_string sway_socket_info sway_socket outputs_as_string

  echo "========================================" >&2
  # shellcheck disable=SC2320
  echo "Script called: $(date +'%Y-%m-%d_%H-%M-%S')." >&2 || return "$?"

  # ========================================
  # X11
  # ========================================
  # Get all users who use Xauthority right now.
  # If Login Manager (SDDM, for example) is running:
  # - as root: "xauth" files will be stored in "/tmp";
  # - as unprivileged user: "xauth" files will be stored in "/run/user/<UID>".
  x11_xauthority_infos_as_string="$(find /run/user/*/xauth_* /tmp/xauth_* -maxdepth 0 -type f -perm 600 -exec ls -l {} \; 2> /dev/null | awk '{print $3 " " $9}')" || true
  if [ -n "${x11_xauthority_infos_as_string}" ]; then
    # Convert to array
    mapfile -t x11_xauthority_infos <<< "${x11_xauthority_infos_as_string}" || return "$?"

    # For each of them
    for x11_xauthority_info in "${x11_xauthority_infos[@]}"; do
      # shellcheck disable=SC2320
      echo "X11 resize event: $(date +'%Y-%m-%d_%H-%M-%S')." >&2 || continue

      user="$(echo "${x11_xauthority_info}" | cut -d ' ' -f 1)" || continue
      if [ -z "${user}" ]; then
        echo "User is empty!" >&2
        continue
      fi
      echo "- User: ${user}" >&2

      xauthority_file="$(echo "${x11_xauthority_info}" | cut -d ' ' -f 2)" || continue
      if [ ! -f "${xauthority_file}" ]; then
        echo "Xauthority file does not exist!" >&2
        continue
      fi
      echo "- Xauthority file: ${xauthority_file}" >&2

      display="$(xauth -f "${xauthority_file}" list | sed -En 's#^[^:]+(:[0-9]+) .+$#\1#p' | head -n 1)" || continue
      if [ -z "${display}" ]; then
        echo "Display is empty!" >&2
        continue
      fi
      echo "- Display: ${display}" >&2

      outputs_as_string="$(DISPLAY="${display}" XAUTHORITY="${xauthority_file}" xrandr | awk '/ connected/{print $1}')" || continue
      if [ -z "${outputs_as_string}" ]; then
        echo "Outputs is empty!" >&2
        continue
      fi

      # Convert to array
      mapfile -t outputs <<< "${outputs_as_string}" || return "$?"

      for output in "${outputs[@]}"; do
        if [ -z "${output}" ]; then
          echo "Output is empty!" >&2
          continue
        fi
        echo "- Output: ${output}" >&2

        resize_x11 "${xauthority_file}" "${display}" "${output}" || continue
      done
    done
  fi
  # ========================================

  # ========================================
  # Wayland: Sway
  # ========================================
  # Get all users who use Sway right now
  sway_socket_infos_as_string="$(find /run/user/*/sway-ipc.*.*.sock -maxdepth 0 -type s -perm 755 -exec ls -l {} \; 2> /dev/null | awk '{print $3 " " $9}')" || true
  if [ -n "${sway_socket_infos_as_string}" ]; then
    # Convert to array
    mapfile -t sway_socket_infos <<< "${sway_socket_infos_as_string}" || return "$?"

    # For each of them
    for sway_socket_info in "${sway_socket_infos[@]}"; do
      # shellcheck disable=SC2320
      echo "Wayland Sway resize event: $(date +'%Y-%m-%d_%H-%M-%S')." >&2 || continue

      user="$(echo "${sway_socket_info}" | cut -d ' ' -f 1)" || continue
      if [ -z "${user}" ]; then
        echo "User is empty!" >&2
        continue
      fi
      echo "- User: ${user}" >&2

      sway_socket="$(echo "${sway_socket_info}" | cut -d ' ' -f 2)" || continue
      if [ ! -S "${sway_socket}" ]; then
        echo "Sway socket does not exist!" >&2
        continue
      fi
      echo "- Sway socket: ${sway_socket}" >&2

      outputs_as_string="$(swaymsg --socket "${sway_socket}" --type 'get_outputs' --raw | jq -r '.[].name')" || continue
      if [ -z "${outputs_as_string}" ]; then
        echo "Outputs is empty!" >&2
        continue
      fi

      # Convert to array
      mapfile -t outputs <<< "${outputs_as_string}" || return "$?"

      output_number=1
      for output in "${outputs[@]}"; do
        if [ -z "${output}" ]; then
          echo "Output is empty!" >&2
          continue
        fi
        echo "- Output: ${output}" >&2

        # New display resolution will be available only after event call ended, so we execute script in background via "screen"
        screen -S "display_autoresize_script" -dm sh -c "\"$0\" \"resize_wayland_sway\" \"${sway_socket}\" \"${output}\" \"${output_number}\"" || continue

        ((output_number++)) || true
      done
    done
  fi
  # ========================================

  if [ -z "${x11_xauthority_infos_as_string}" ] && [ -z "${sway_socket_infos_as_string}" ]; then
    echo "No sessions found!" >&2
  fi

  return 0
}

function_name_to_call="${1}" && { shift || true; }
# For call via "screen" - to not store code in string passed to "screen", which is hard to be worked with
if [ "${function_name_to_call}" = "resize_wayland_sway" ]; then
  resize_wayland_sway "$@" 2>&1 | tee --append "${log_file_path}" || exit "$?"
else
  # Allow only one instance at the time
  if pgrep -f '/usr/bin/display-autoresize' > /dev/null; then
    echo "Already running!" >&2
    exit 0
  fi

  display_autoresize "$@" 2>&1 | tee --append "${log_file_path}" || exit "$?"
fi

